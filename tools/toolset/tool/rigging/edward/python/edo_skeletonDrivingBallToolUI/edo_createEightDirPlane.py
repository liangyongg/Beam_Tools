import maya.cmds as cmds
#edo_createEightDirPlane('joint1')
def edo_createEightDirPlane(jnt):
    #jnt='joint1'
    name=jnt+'_eightDirPlane'
    cp=cmds.circle(ch=1,o=1,nr=[0,1,0],r=1,n=name+'_curve')
    cmds.delete(cp[1])
    discp=cmds.circle(ch=1,o=1,nr=[0,1,0],r=1,n=name+'_disRemap')
    cmds.delete(discp[1])
    cmds.parent(discp[0],cp[0])
    cmds.setAttr(cp[0]+'Shape.overrideEnabled',1)
    cmds.setAttr(cp[0]+'Shape.ovc',17)
    cmds.setAttr(discp[0]+'Shape.overrideEnabled',1)
    cmds.setAttr(discp[0]+'Shape.ovc',10)
    cmds.setAttr(discp[0]+'.translate',e=1,l=1)
    cmds.connectAttr(discp[0]+'.sx',discp[0]+'.sz')
    cmds.setAttr(discp[0]+'.sz',e=1,l=1)
    cmds.setAttr(discp[0]+'.sy',e=1,l=1)
    cmds.setAttr(discp[0]+'.rotate',e=1,l=1)
    cmds.addAttr(cp[0],ln='globalScale',at='float',dv=1.0)
    cmds.setAttr(cp[0]+'.globalScale',e=1,k=0,cb=1)
    #add center loc
    ctloc=cmds.spaceLocator(p=[0,0,0],n=name+'_ctLoc')
    cmds.setAttr(ctloc[0]+'.visibility',0)
    cmds.parent(ctloc,cp[0])
    clocs=edo_createDirCurve(name+'_C',ctloc[0],0)
    cloc=clocs[2]
    cmds.setAttr(cloc+'.tx',0)
    cmds.setAttr(cloc+'.visibility',1)
    #cloc='joint1_eightDirPlane_CLoc'
    cmds.transformLimits(cloc,ty=[0,0],ety=[1,1])
    ccurve=clocs[1]
    cmds.parent(clocs[0],cp[0])
    cmds.parent(cloc,cp[0])
    cmds.connectAttr(cloc+'.translate',ccurve+'.controlPoints[1]',f=1)
    dis=cmds.createNode('distanceBetween')
    cmds.connectAttr(ctloc[0]+'.worldPosition',dis+'.point1')
    cmds.connectAttr(cloc+'.worldPosition',dis+'.point2')
    cmds.addAttr(cp[0],ln='disWeight',at='float',dv=0.0)
    cmds.setAttr(cp[0]+'.disWeight',e=1,k=0,cb=1)
    dismd=cmds.createNode('multiplyDivide')
    cmds.setAttr(dismd+'.op',2)
    cmds.connectAttr(dis+'.distance',dismd+'.input1X')
    cmds.connectAttr(cp[0]+'.globalScale',dismd+'.input2X')
    discl=cmds.createNode('remapValue')
    cmds.connectAttr(dismd+'.outputX',discl+'.inputValue')
    #powmd=cmds.createNode('multiplyDivide')
    #cmds.setAttr(powmd+'.op',1)
    #cmds.connectAttr(discl+'.outValue',powmd+'.input1X')
    #cmds.connectAttr(discl+'.outValue',powmd+'.input2X')
    #cmds.connectAttr(powmd+'.outputX',cp[0]+'.disWeight')
    #cmds.connectAttr(discl+'.outValue',cp[0]+'.disWeight')
    #cmds.addAttr(cp[0],ln='delta',at='float')
    #cmds.setAttr(cp[0]+'.delta',e=1,k=0)
    ex=cp[0]+'.disWeight = linstep(0,90, asind(' + discl+'.outValue));'
    cmds.expression(n=cp[0]+'_deltaExpression',s=ex)
    #cmds.setAttr(cp[0]+'.delta',e=1,cb=1)
    #
    cmds.addAttr(cp[0],ln='remapDisWeight',at='float',dv=0.0,maxValue=1.0,minValue=0.0)
    cmds.setAttr(cp[0]+'.remapDisWeight',e=1,k=0,cb=1)
    cmds.connectAttr(cp[0]+'.remapDisWeight',discl+'.inputMin')
    cmds.connectAttr(cp[0]+'.remapDisWeight',discp[0]+'.sx')
    #add dir curve
    upcurve=edo_createDirCurve(name+'curve_up',ctloc[0],0)
    lfcurve=edo_createDirCurve(name+'curve_lf',ctloc[0],-90)
    dncurve=edo_createDirCurve(name+'curve_dn',ctloc[0],-180)
    rtcurve=edo_createDirCurve(name+'curve_rt',ctloc[0],-270)
    lfupcurve=edo_createDirCurve(name+'curve_lfup',ctloc[0],-45)
    rtupcurve=edo_createDirCurve(name+'curve_rtup',ctloc[0],-315)
    lfdncurve=edo_createDirCurve(name+'curve_lfdn',ctloc[0],-135)
    rtdncurve=edo_createDirCurve(name+'curve_rtdn',ctloc[0],-225)
    alldircurve=[upcurve[0],lfcurve[0],dncurve[0],rtcurve[0],lfupcurve[0],rtupcurve[0],lfdncurve[0],rtdncurve[0]]
    cmds.parent(alldircurve,cp[0])
    edo_createAngleAttribute(cp[0],[upcurve[1],lfupcurve[1]],ccurve)
    edo_createAngleAttribute(cp[0],[upcurve[1],rtupcurve[1]],ccurve)
    edo_createAngleAttribute(cp[0],[lfupcurve[1],lfcurve[1]],ccurve)
    edo_createAngleAttribute(cp[0],[rtupcurve[1],rtcurve[1]],ccurve)
    edo_createAngleAttribute(cp[0],[lfcurve[1],lfdncurve[1]],ccurve)
    edo_createAngleAttribute(cp[0],[rtcurve[1],rtdncurve[1]],ccurve)
    edo_createAngleAttribute(cp[0],[lfdncurve[1],dncurve[1]],ccurve)
    edo_createAngleAttribute(cp[0],[rtdncurve[1],dncurve[1]],ccurve)
    edo_createAngleAttribute(cp[0],[upcurve[1],lfcurve[1]],ccurve,4)
    edo_createAngleAttribute(cp[0],[lfcurve[1],dncurve[1]],ccurve,4)
    edo_createAngleAttribute(cp[0],[dncurve[1],rtcurve[1]],ccurve,4)
    edo_createAngleAttribute(cp[0],[rtcurve[1],upcurve[1]],ccurve,4)
    edo_createWeightAttrs(cp[0],'up_Weight_8',ccurve+'.up_8Axis_angleWeight')
    edo_createWeightAttrs(cp[0],'lfup_Weight_8',ccurve+'.lfup_8Axis_angleWeight')
    edo_createWeightAttrs(cp[0],'lf_Weight_8',ccurve+'.lf_8Axis_angleWeight')
    edo_createWeightAttrs(cp[0],'lfdn_Weight_8',ccurve+'.lfdn_8Axis_angleWeight')
    edo_createWeightAttrs(cp[0],'dn_Weight_8',ccurve+'.dn_8Axis_angleWeight')
    edo_createWeightAttrs(cp[0],'rtdn_Weight_8',ccurve+'.rtdn_8Axis_angleWeight')
    edo_createWeightAttrs(cp[0],'rt_Weight_8',ccurve+'.rt_8Axis_angleWeight')
    edo_createWeightAttrs(cp[0],'rtup_Weight_8',ccurve+'.rtup_8Axis_angleWeight')
    edo_createWeightAttrs(cp[0],'up_Weight_4',ccurve+'.up_4Axis_angleWeight')
    edo_createWeightAttrs(cp[0],'lf_Weight_4',ccurve+'.lf_4Axis_angleWeight')
    edo_createWeightAttrs(cp[0],'dn_Weight_4',ccurve+'.dn_4Axis_angleWeight')
    edo_createWeightAttrs(cp[0],'rt_Weight_4',ccurve+'.rt_4Axis_angleWeight')
    return cp[0]

def edo_createWeightAttrs(icp,attrname,ccurveattr):
    #attrname=up_Weight_8
    #ccurveattr=ccurve+'.up_angleWeight'
    #icp=cp[0]
    cmds.addAttr(icp,ln=attrname)
    cmds.setAttr(icp+'.'+attrname,e=1,k=0,cb=1)
    md=cmds.createNode('multiplyDivide')
    cmds.connectAttr(ccurveattr,md+'.input1X')
    cmds.connectAttr(icp+'.disWeight',md+'.input2X')
    cmds.connectAttr(md+'.outputX',icp+'.'+attrname)

def edo_createAngleAttribute(icp,icurves,ctcurve,axis=8):
    #icp=cp[0]
    #icurves=[upcurve[1],lfcurve[1]]
    #ctcurve='joint1_eightDirPlane_C'
    c1=icurves[0]
    c2=icurves[1]
    l1=c1.split('_')[-1]
    l2=c2.split('_')[-1]
    cmds.addAttr(icp,ln=l1+'_'+l2+'_angle',at='float')
    cmds.setAttr(icp+'.'+l1+'_'+l2+'_angle',e=1,k=0,cb=1)
    ag1=cmds.createNode('angleBetween')
    cmds.connectAttr(c1+'.VX',ag1+'.vector1X',f=1)
    cmds.connectAttr(c1+'.VY',ag1+'.vector1Y',f=1)
    cmds.connectAttr(c1+'.VZ',ag1+'.vector1Z',f=1)
    cmds.connectAttr(c2+'.VX',ag1+'.vector2X',f=1)
    cmds.connectAttr(c2+'.VY',ag1+'.vector2Y',f=1)
    cmds.connectAttr(c2+'.VZ',ag1+'.vector2Z',f=1)
    cmds.connectAttr(ag1+'.angle',icp+'.'+l1+'_'+l2+'_angle',f=1)
    #ang
    mut3=cmds.createNode('multiplyDivide')
    cmds.setAttr(mut3+'.operation',2)
    rv=cmds.createNode('reverse')
    cm=cmds.createNode('clamp')
    cmds.setAttr(cm+'.maxR',1)
    cmds.setAttr(cm+'.maxG',1)
    cmds.setAttr(cm+'.maxB',1)
    cmds.connectAttr(icp+'.'+l1+'_'+l2+'_angle',mut3+'.input2Y')
    cmds.connectAttr(icp+'.'+l1+'_'+l2+'_angle',mut3+'.input2X')
    if axis==4:
        l1=l1+'_4Axis'
        l2=l2+'_4Axis'
    if axis==8:
        l1=l1+'_8Axis'
        l2=l2+'_8Axis'
    if not cmds.objExists(ctcurve+'.'+l1+'_angle'):
        ag3=cmds.createNode('angleBetween')
        cmds.connectAttr(ctcurve+'.VX',ag3+'.vector1X',f=1)
        cmds.connectAttr(ctcurve+'.VY',ag3+'.vector1Y',f=1)
        cmds.connectAttr(ctcurve+'.VZ',ag3+'.vector1Z',f=1)
        cmds.connectAttr(c1+'.VX',ag3+'.vector2X',f=1)
        cmds.connectAttr(c1+'.VY',ag3+'.vector2Y',f=1)
        cmds.connectAttr(c1+'.VZ',ag3+'.vector2Z',f=1)
        cmds.addAttr(ctcurve,ln=l1+'_angle',at='float')
        cmds.setAttr(ctcurve+'.'+l1+'_angle',e=1,k=0,cb=1)
        cmds.connectAttr(ag3+'.angle',ctcurve+'.'+l1+'_angle')
        cmds.connectAttr(ctcurve+'.'+l1+'_angle',mut3+'.input1X')
        cmds.connectAttr(mut3+'.outputX',rv+'.inputX')
        cmds.addAttr(ctcurve,ln=l1+'_angleWeight',at='float')
        cmds.setAttr(ctcurve+'.'+l1+'_angleWeight',e=1,k=0,cb=1)
        cmds.connectAttr(rv+'.outputX',cm+'.inputR')
        cmds.connectAttr(cm+'.outputR',ctcurve+'.'+l1+'_angleWeight')
    #
    if not cmds.objExists(ctcurve+'.'+l2+'_angle'):
        ag2=cmds.createNode('angleBetween')
        cmds.connectAttr(ctcurve+'.VX',ag2+'.vector1X',f=1)
        cmds.connectAttr(ctcurve+'.VY',ag2+'.vector1Y',f=1)
        cmds.connectAttr(ctcurve+'.VZ',ag2+'.vector1Z',f=1)
        cmds.connectAttr(c2+'.VX',ag2+'.vector2X',f=1)
        cmds.connectAttr(c2+'.VY',ag2+'.vector2Y',f=1)
        cmds.connectAttr(c2+'.VZ',ag2+'.vector2Z',f=1)
        cmds.addAttr(ctcurve,ln=l2+'_angle',at='float')
        cmds.setAttr(ctcurve+'.'+l2+'_angle',e=1,k=0,cb=1)
        cmds.connectAttr(ag2+'.angle',ctcurve+'.'+l2+'_angle')
        cmds.connectAttr(ctcurve+'.'+l2+'_angle',mut3+'.input1Y')
        cmds.connectAttr(mut3+'.outputY',rv+'.inputY')
        cmds.addAttr(ctcurve,ln=l2+'_angleWeight',at='float')
        cmds.setAttr(ctcurve+'.'+l2+'_angleWeight',e=1,k=0,cb=1)
        cmds.connectAttr(rv+'.outputY',cm+'.inputG')
        cmds.connectAttr(cm+'.outputG',ctcurve+'.'+l2+'_angleWeight',f=1)

def edo_createDirCurve(name,ctloc,rt=0):
    #rt=0
    #ctloc=ctloc[0]
    upcurve=cmds.curve(p=[(0,0,0),(1,0,0)],k=[0,1],d=1,n=name)
    sh=cmds.listRelatives(upcurve,s=1,pa=1)[0]
    cmds.rename(sh,upcurve+'Shape')
    grp=cmds.group(upcurve,n='GRP_'+upcurve)
    cmds.xform(grp,ws=1,piv=[0,0,0])
    loc=cmds.spaceLocator(p=[0,0,0],n=name+'Loc')
    cmds.xform(loc[0],ws=1,t=[1,0,0])
    cmds.parent(loc,upcurve)
    cmds.setAttr(grp+'.ry',rt)
    cmds.setAttr(upcurve+'.tx',e=1,l=1)
    cmds.setAttr(upcurve+'.ty',e=1,l=1)
    cmds.setAttr(upcurve+'.tz',e=1,l=1)
    cmds.setAttr(upcurve+'.rx',e=1,l=1)
    cmds.setAttr(upcurve+'.ry',e=1,l=1)
    cmds.setAttr(upcurve+'.rz',e=1,l=1)
    cmds.setAttr(upcurve+'.sx',e=1,l=1)
    cmds.setAttr(upcurve+'.sy',e=1,l=1)
    cmds.setAttr(upcurve+'.sz',e=1,l=1)
    pv=cmds.createNode('plusMinusAverage',n=name+'_plusMinusAverage')
    cmds.setAttr(pv+'.operation',2)
    cmds.connectAttr(loc[0]+'.worldPosition',pv+'.input3D[0]',f=1)
    cmds.connectAttr(ctloc+'.worldPosition',pv+'.input3D[1]',f=1)
    cmds.addAttr(upcurve,ln='VX',at='float')
    cmds.addAttr(upcurve,ln='VY',at='float')
    cmds.addAttr(upcurve,ln='VZ',at='float')
    cmds.setAttr(upcurve+'.VX',e=1,cb=1,k=0)
    cmds.setAttr(upcurve+'.VY',e=1,cb=1,k=0)
    cmds.setAttr(upcurve+'.VZ',e=1,cb=1,k=0)
    cmds.connectAttr(pv+'.output3Dx',upcurve+'.VX',f=1)
    cmds.connectAttr(pv+'.output3Dy',upcurve+'.VY',f=1)
    cmds.connectAttr(pv+'.output3Dz',upcurve+'.VZ',f=1)
    cmds.setAttr(loc[0]+'.visibility',0)
    return [grp,upcurve,loc[0]]
    return upcurve