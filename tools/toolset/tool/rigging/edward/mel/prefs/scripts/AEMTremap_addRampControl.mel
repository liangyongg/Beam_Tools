// Copyright (C) 1997-2011 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Procedure Name:
//	AEaddRampControl
//
//  Description Name;
//	Creates the attribute editor controls for the ramp widget
//
//  Input Value:
//	nodeName 
//
//  Output Value:
//	None
// 

global string $edo_MTremapAttributeNodeName;

proc string localizedAttrName( string $name ) {
	if( $name == "Selected Color" ) {
		return (uiRes("m_AEaddRampControl.kSelClr"));
	} else if( $name == "Selected Position" ) {
		return (uiRes("m_AEaddRampControl.kSelPos"));
	} else if( $name == "Selected Value" ) {
		return (uiRes("m_AEaddRampControl.kSelVal"));
	} else if( $name == "Interpolation method" ) {
		return (uiRes("m_AEaddRampControl.kInterpMethod"));
	}
}


global proc AEmakeCompactRamp (string $nodeAttr,
							   int $scaleSlider,
							   int $staticEntries,
							   int $staticPositions,
							   int $adaptiveScaling )
//
//	Description:
//
//	$staticEntries - If set to 1, the gradientControl widget will be set to
//					a fixed number of ramp entries (control points).
//
{
	string $buffer[];
	tokenize($nodeAttr, ".", $buffer);
	string $attr = $buffer[1];

	string $rampName = $attr + "Ramp";
	string $editButton = $attr + "RampEdit";
	string $scName = $attr +"Scc";
	string $spName = $attr +"Sp";
	string $siName = $attr +"Si";

	string $colEntryName =  ($nodeAttr + "[0]." + $attr + "_ColorR");
	int $isColor = `objExists ($colEntryName)`;
	int $hasInput = `objExists ($nodeAttr +"Input")`;
	int $hasInputScale = `objExists ($nodeAttr +"InputScale")`;
	string $inputName = "InputScale";
	if( !$hasInputScale ) {
		if(`objExists ($nodeAttr +"InputBias")`) {
			$inputName = "InputBias";
			$hasInputScale = true;
		} else if(`objExists ($nodeAttr +"InputMax")`) {
			$inputName = "InputMax";
			$hasInputScale = true;
		}
	}
	setUITemplate -pst attributeEditorTemplate;
	string $rampBlock = `formLayout ($rampName + "Block")`;
	string $attrNiceName = `attributeName -nice $nodeAttr`;
    	string $label = `text -label $attrNiceName -align right ($rampName + "Label")`;

	string $rframe = `frameLayout -bs "in" -lv 0 -cll 0 ($rampBlock + "fr")`;
	string $rampForm = `formLayout ($rampName + "Form")`;
		string $spc	= `attrFieldSliderGrp -l ""
			-annotation (localizedAttrName("Selected Position"))
			-h 30 -w 70 -cw4 1 69 1 1 $spName`;

		string $scc;
		if( $isColor ){
			$scc= `attrColorSliderGrp -l "" 
				-annotation (localizedAttrName("Selected Color")) -sb 1
				-h 26 -w 77 -cw4 2 45 1 26 -adj 3 $scName`;
		} else {
			$scc	= `attrFieldSliderGrp -l "" 
				-annotation (localizedAttrName("Selected Value"))
				-h 30 -w 70 -cw4 1 44 1 26 $scName`;
		}
		$editButton = `button -l ">" -width 23 -c ("AEMTremap_editRampAttribute "+$nodeAttr) $editButton`;

		string $widgetName = `gradientControl
							-at  $nodeAttr
							-snc $staticEntries
							-sp  $staticPositions
							-ror $adaptiveScaling
							-as  $adaptiveScaling
							//-w 148 -h 74
							-w 135 -h 74
							$rampName`;
	
		string $interp = `attrEnumOptionMenuGrp -l "" 
			-annotation (localizedAttrName("Interpolation method"))
			-h 30 -w 70 -cw2 1 69  $siName`;
		string $pInput, $pInputScale;
		if( $hasInputScale ){ 
			string $multiplier = (uiRes("m_AEaddRampControl.kMultiplierAnnot"));
			if( $hasInput ){
				$pInputScale	= `attrFieldSliderGrp -l "" 
				-ann $multiplier
				-h 30 -w 58 -cw4 1 50 1 1
				-at ($nodeAttr + $inputName) ($rampName + $inputName)`;
			} else {
				$pInputScale	= `attrFieldSliderGrp -l (uiRes("m_AEaddRampControl.kInScale"))
				-ann $multiplier
				-h 30 -w 240 -cw4 70 69 100 1
				-at ($nodeAttr + $inputName) ($rampName + $inputName)`;
			}
		}
		if( $hasInput ){
			string $input = (uiRes("m_AEaddRampControl.kInput"));
			string $inputAnnot = (uiRes("m_AEaddRampControl.kInputAnnot"));
			if( $hasInputScale ){ 
				$pInput = `attrEnumOptionMenuGrp -l $input
				-ann $inputAnnot
				-h 30 -w 188 -cw2 78 110 
				-at ($nodeAttr + "Input") ($rampName + "Input")`;
			} else {
				$pInput = `attrEnumOptionMenuGrp -l $input
				-ann $inputAnnot
				-h 30 -w 240 -cw2 78 160 
				-at ($nodeAttr + "Input") ($rampName + "Input")`;
			}
		}

		formLayout
			-edit
				-attachForm $spc "left" -10 
				-attachNone $spc "right"
				-attachForm $spc "top" 2
				-attachNone $spc "bottom"

				-attachForm $scc "left" -10
				-attachNone $scc "right"
				-attachControl $scc "top" -3 $spc
				-attachNone $scc "bottom"

				-attachForm $widgetName "left" 70
				-attachNone $widgetName "right"
				-attachForm $widgetName "top" 3
				-attachNone $widgetName "bottom"

				-attachForm $interp "left" -10 
				-attachNone $interp "right"
				-attachControl $interp "top" -3 $scc
				-attachNone $interp "bottom"

				-attachForm $editButton "top" 0
				-attachForm $editButton "bottom" 0
				-attachControl $editButton "left" 5 $widgetName
				-attachNone $editButton "right" 0

				$rampForm;
		if( $hasInput ){
			if($hasInputScale){
				formLayout -edit
				-attachControl $pInput "top" -3 $interp 
				-attachForm $pInput "left" -10 
				-attachControl $pInputScale "top" -3 $interp 
				-attachControl $pInputScale "left" -10  $pInput 
				$rampForm;
			} else {
				formLayout -edit
				-attachControl $pInput "top" -3 $interp 
				-attachForm $pInput "left" -10 
				$rampForm;
			}
		} else if( $hasInputScale ){
			formLayout -edit
			-attachControl $pInputScale "top" -3 $interp 
			-attachForm $pInputScale "left" -10 
			$rampForm;
		}
	setParent ..;
	setParent ..;
	formLayout
			-edit
				-attachForm $rframe "left" 131 
				-attachForm $rframe "top" 0

				-attachControl $label "right" 0 $rframe 
				-attachForm $label "top" 30 
				$rampBlock;
	setParent ..;


	// tell the port about the controls
	gradientControl -e -scc $scc $widgetName;
	gradientControl -e -spc $spc $widgetName;
	gradientControl -e -sic $interp $widgetName;
	setUITemplate -ppt;
}


global proc AEMTremap_makeLargeRamp( string $nodeAttr,
							int $bound,
							int $indent,
							int $staticEntries,
							int $staticPositions,
							int $adaptiveScaling )
//
//	Description:
//
//	$staticEntries - If set to 1, the gradientControl widget will be set to
//					a fixed number of ramp entries (control points).
//
{
    global string $edo_MTremapAttributeNodeName;
    //print ("$edo_MTremapAttributeNodeName is " + $edo_MTremapAttributeNodeName + "\n");
    
	string $buffer[];
	tokenize($nodeAttr, ".", $buffer);
	string $attr = $buffer[ size($buffer) - 1];

	string $rampName = $attr + "Ramp";
	//print ("-------------------------"+$rampName+"\n");
 	string $editButton = $attr + "RampEdit";
	string $scName = $attr +"Scc";
	string $spName = $attr +"Sp";
	string $siName = $attr +"Si";

	string $colEntryName =  ($nodeAttr + "[0]." + $attr + "_ColorR");
	int $isColor = `objExists ($colEntryName)`;

	setUITemplate -pst attributeEditorTemplate;
	columnLayout -rowSpacing 2;
	rowLayout -numberOfColumns 2 -cw2 123 50 "rampIndexRow";
	text -label "   Ramp Index";
	string $cmd=("AEMTremap_rampIndexFieldCmd(\""+$edo_MTremapAttributeNodeName+"\")");
	string $rampIndex = `intField -w 50 -v 0 -min 0 -cc $cmd -ec $cmd "AEMTremap_rampIndexField"`;
	setParent ..;
	// ramp block
	string $rampForm = `formLayout ($rampName + "Form")`;
	    
		string $spc	= `attrFieldSliderGrp -label (localizedAttrName("Selected Position"))
			-cw 1 123 -annotation (localizedAttrName("Selected Position")) $spName`;

		string $scc;
		if( $isColor ){
			$scc= `attrColorSliderGrp -label (localizedAttrName("Selected Color"))
				-cw 1 123 -cw 2 45 -cw 3 0 -annotation (localizedAttrName("Selected Color")) -sb 1 $scName`;
		} else {
			$scc	= `attrFieldSliderGrp -label (localizedAttrName("Selected Value"))
			-cw 1 123 -annotation (localizedAttrName("Selected Value")) $scName`;
		}
		
		string $interp = `attrEnumOptionMenuGrp -label (uiRes("m_AEaddRampControl.kInterp"))
			-cw 1 123 -annotation (localizedAttrName("Interpolation method")) $siName`;
		string $boundStyle = "etchedIn";
		if( $bound ){
			$boundStyle = "in";
		}
		string $lmax;
		if ( $adaptiveScaling ) {
			$lmax = `text -label "1.0" -vis false ($rampName+"LX")`;
		}
		$editButton = `button -l ">" -width 23 -c ("AEMTremap_editRampAttribute "+$nodeAttr) $editButton`;
		string $rframe = `frameLayout -bs $boundStyle -lv 0 -cll 0 ($rampForm + "fr")`;
		string $widgetName = `gradientControl
								-at $nodeAttr
								-snc $staticEntries
								-sp $staticPositions
								// -w 148 -h 74
								-w 135 -h 74
								$rampName`;
		if ( $adaptiveScaling ) {
		    //print ("... " + $lmax + "\n");
			gradientControl -e -as $adaptiveScaling -ror $adaptiveScaling -ulc $lmax $widgetName;
		}

		setParent ..;
		formLayout
			-edit
				-attachForm $spc "left"  0
				-attachNone $spc "right"
				-attachForm $spc "top" 0
				-attachNone $spc "bottom"

				-attachForm $scc "left" 0 
				-attachNone $scc "right"
				-attachControl $scc "top" 0 $spc
				-attachNone $scc "bottom"

				-attachForm $interp "left" 0 
				-attachNone $interp "right"
				-attachControl $interp "top" 0 $scc
				-attachNone $interp "bottom"

				-attachControl $rframe "left" 2 $interp
				-attachNone $rframe "right"
				-attachForm $rframe "top" 0
				-attachNone $rframe "bottom"

				-attachForm $editButton "top" 0
				-attachForm $editButton "bottom" 0
				-attachControl $editButton "left" 5 $rframe
				-attachNone $editButton "right"
				$rampForm;

		if ( $adaptiveScaling ) {
			formLayout
				-edit
					-attachControl $lmax "left" 2 $rframe
					-attachNone $lmax "right"
					-attachForm $lmax "top" 0
					-attachNone $lmax "bottom"
					$rampForm;
		}
	setParent ..;

	// input
	if(objExists ($nodeAttr +"Input")){
		string $inLabel;
		string $labelAttr = `attributeName -nice $nodeAttr`;
		string $inputVarAnnot = (uiRes("m_AEaddRampControl.kInputVarAnnot"));
		
		if( $indent || size( $labelAttr ) < 9 ){
			string $fmt = (uiRes("m_AEaddRampControl.kInputFmt"));
			$inLabel = `format -s $labelAttr $fmt`;
		} else {
			$inLabel = (uiRes("m_AEaddRampControl.kInputShort"));
		}
		if( $indent ){
			attrEnumOptionMenuGrp -l $inLabel
				-ann $inputVarAnnot
				-cw 1 204
				-at ($nodeAttr + "Input") ($rampName + "Input");
		} else {
			attrEnumOptionMenuGrp -l $inLabel
				-ann $inputVarAnnot
				-cw 1 123
				-at ($nodeAttr + "Input") ($rampName + "Input");
		}
		
	}

	// inputBias
	if(  objExists ($nodeAttr +"InputBias") ){
		attrFieldSliderGrp -label (uiRes("m_AEaddRampControl.kInputBias")) -cw4 123 81 130	25 
				-at ($nodeAttr +"InputBias") ($rampName + "InputBias");
	}

	// inputScale
	if(  objExists ($nodeAttr +"InputScale") ){
		attrFieldSliderGrp -label (uiRes("m_AEaddRampControl.kInputScale")) -cw4 123 81 130 25	
				-at ($nodeAttr +"InputScale") ($rampName + "InputScale");
	}
	// inputMax
	if(  objExists ($nodeAttr +"InputMax") ){
		attrFieldSliderGrp -label (uiRes("m_AEaddRampControl.kInputMax")) -cw4 123 81 130 25	
				-at ($nodeAttr +"InputMax") ($rampName + "InputMax");
	}
	// inputOffset
	if(  objExists ($nodeAttr +"InputOffset") ){
		attrFieldSliderGrp -label (uiRes("m_AEaddRampControl.kInputOffset")) -cw4 123 81 130 25	
				-at ($nodeAttr +"InputOffset") ($rampName + "InputOffset");
	}

	// tell the port about the controls
	gradientControl -e -scc $scc $widgetName;
	gradientControl -e -spc $spc $widgetName;
	gradientControl -e -sic $interp $widgetName;
	setUITemplate -ppt;

}

global proc AEMTremap_makeRampControlInteractiveNew_doIt(string $nodeAttr, int $adaptiveScaling)
{
	int $rampDrawMethod = 0;
	if( `optionVar -exists "gradientControlDrawMethod"` ){
		$rampDrawMethod = `optionVar -q "gradientControlDrawMethod"`;
	}

	switch( $rampDrawMethod )
	{
	case 1:
	    //print "case 1 \n";
		AEmakeCompactRamp( $nodeAttr,	// nodeAttr
						0,				// scaleSlider
						0,				// staticEntries
						0,			// staticPositions
						$adaptiveScaling );     
		break;
	case 2:
	    //print "case 2 \n";
		AEmakeCompactRamp( $nodeAttr,1,0,0,$adaptiveScaling );
		break;
	case 3:
	    //print "case 3 \n";
		AEMTremap_makeLargeRamp( $nodeAttr,		// nodeAttr
						0,				// bound
						0,				// indent
						0,				// staticEntries
						0,			// staticPositions
						$adaptiveScaling );
		break;
	case 4:
	    //print "case 4 \n";
		AEMTremap_makeLargeRamp( $nodeAttr,1,0,0,0,$adaptiveScaling );
		break;
	default:
	    //print "case defualt \n";
		AEMTremap_makeLargeRamp( $nodeAttr,1,1,0,0,$adaptiveScaling );
		break;
	}
}

global proc AEMTremap_makeRampControlInteractiveNew (string $nodeAttr)
{
	AEMTremap_makeRampControlInteractiveNew_doIt( $nodeAttr, false );
}

global proc AEMTremap_makeRampControlInteractiveNewAS (string $nodeAttr)
{
	AEMTremap_makeRampControlInteractiveNew_doIt( $nodeAttr, true );
}

global proc AEMTremap_makeRampControlInteractiveReplace (string $nodeAttr)
{
    //print "global proc AEMTremap_makeRampControlInteractiveReplace ....  start  .... \n";
    global string $edo_MTremapAttributeNodeName;
    $edo_MTremapAttributeNodeName=$nodeAttr;
	string $buffer[];
	tokenize($nodeAttr, ".", $buffer);
	string $attr = $buffer[1];

	string $rampName = $attr + "Ramp";
	string $editButton = $attr + "RampEdit";

	gradientControl -edit -at $nodeAttr $rampName;

	if( `button -exists $editButton` ){	
		button -edit -c ("AEMTremap_editRampAttribute "+$nodeAttr) $editButton;
	}

//	attrEnumOptionMenuGrp -edit -at ($nodeAttr + "_Interp") ($rampName + "_Interp");

	if( `objExists ($nodeAttr +"Input")` ){
	    //print ($nodeAttr + "Input  ----  "+$rampName + "Input");
		attrEnumOptionMenuGrp -edit -at ($nodeAttr + "Input") ($rampName + "Input");
	}

	if( `objExists ($nodeAttr +"InputScale")` ){
	    //print ($nodeAttr + "InputScale  ----  "+$rampName + "InputScale");
		attrFieldSliderGrp -edit -at ($nodeAttr + "InputScale") ($rampName + "InputScale");
	}

	if( `objExists ($nodeAttr +"InputBias")` ){
	    //print ($nodeAttr + "InputBias  ----  "+$rampName + "InputBias");
		attrFieldSliderGrp -edit -at ($nodeAttr + "InputBias") ($rampName + "InputBias");
	}

	if( `objExists ($nodeAttr +"InputMax")` ){
	    //print ($nodeAttr + "InputMax  ----  "+$rampName + "InputMax");
		attrFieldSliderGrp -edit -at ($nodeAttr + "InputMax") ($rampName + "InputMax");
	}

	if( `objExists ($nodeAttr +"InputOffset")` ){
		if (`attrFieldSliderGrp -query -exists ($rampName + "InputOffset")`) {
		    //print ($nodeAttr + "InputOffset  ----  "+$rampName + "InputOffset");
			attrFieldSliderGrp -edit -at ($nodeAttr + "InputOffset") ($rampName + "InputOffset");
		}
	}

	string $cmd=("AEMTremap_rampIndexFieldCmd(\""+$edo_MTremapAttributeNodeName+"\")");
	//print ($cmd+" .. cc cmd ... \n");
    intField -e -cc $cmd -ec $cmd "AEMTremap_rampIndexField";

	string $temp[];
    tokenize $edo_MTremapAttributeNodeName "." $temp;
    string $nodeName = $temp[0];

    if (`objExists ($nodeName+".remapCurrentIndex")`)
    {
        int $id = `getAttr ($nodeName+".remapCurrentIndex")`;
        intField -e -v $id "AEMTremap_rampIndexField";
    }

    else
    {
    	intField -e -v 0 "AEMTremap_rampIndexField";
    };
	string $cmd=("AEMTremap_rampIndexFieldCmd(\""+$edo_MTremapAttributeNodeName+"\")");
	eval($cmd);
	//print "global proc AEMTremap_makeRampControlInteractiveReplace ....  end  .... \n";
}

global proc AEMTremap_addRampControl_doIt( string $rampName, int $adaptiveScaling )
//  
//  Description: 
// In order to use catalog lookups for the attribute name,
// $rampName should be of form "pCube.translateX".  For backward
// compatability, $rampName can also be just
// "translateX" but in this case no catalog lookup can be
// performed and interToUI() will be called to obtain the UI
// display label for the attribute.
// 
{
    //string $rampName="MTremapValue1.remaps[0].remap";
    //print ("AEMTremap_addRampControl_doIt ... " + $rampName + "\n");
    string $rampNodeAttr = $rampName;
    int $rampDrawMethod = 0;
    if( `optionVar -exists "gradientControlDrawMethod"` ) {
        $rampDrawMethod = `optionVar -q "gradientControlDrawMethod"`;
    }
    int $subBlock = (($rampDrawMethod < 1) || ($rampDrawMethod > 2));
    if( $subBlock ){
        
        string $remapTemp[];
        tokenize ($rampName,".",$remapTemp);
        //print $remapTemp[size($remapTemp)-1];
        
        string $rampTitle;
        string $nodeAttr[];
        if ($remapTemp[size($remapTemp)-1]=="remap")
        {
            //print "this is MTremapValue node ... ";
            tokenize ($rampName,".",$nodeAttr);
             if( size($nodeAttr) == 3 ) {
                
                $rampTitle = `attributeName -nice $rampName`;
                //print $rampTitle;
                // Change rampName back to attrName format
                //
                $rampName = $nodeAttr[1]+"."+$nodeAttr[2];   
                //print $rampName;  
            }
        }
        else
        {
            
        
            // tokenize $rampName on "." to see if we get the nodeName and attrName
            // pieces required for a catalog lookup.
            //
            tokenize ($rampName,".",$nodeAttr);
            //print $nodeAttr;
            if( size($nodeAttr) == 2 ) {
                
                $rampTitle = `attributeName -nice $rampName`;
                //print $rampTitle;
                // Change rampName back to attrName format
                //
                $rampName = $nodeAttr[1];   
                //print $rampName;  
            }
            // Old-style attr name used.  No choice but to use interToUI().
            //
            else {
                // I18N_OK: All calls to AEaddRampControl and AEaddRampControlAS
                // must be modified to include nodeName.attrName as the 1st 
                // attribute instead of just attrName. If this was not done, 
                // we have to revert to interToUI as a last resort.
                //print $rampName;
                $rampTitle = interToUI($rampName);
                //print $rampTitle;
            }
        };
        //print (" remap attribute Title is :  " + $rampTitle);

        editorTemplate -beginLayout $rampTitle -collapse false;
    }
   
    //print ("remap attribute is :  " + $rampName + "\n");
    //print ("$adaptiveScaling : "  + $adaptiveScaling + "\n");

 	//editorTemplate -callCustom ($adaptiveScaling
	//		? "AEmakeRampControlInteractiveNewAS" : "AEmakeRampControlInteractiveNew")
	//					"AEmakeRampControlInteractiveReplace" $rampName;

 	editorTemplate -callCustom ($adaptiveScaling
			? "AEMTremap_makeRampControlInteractiveNewAS" : "AEMTremap_makeRampControlInteractiveNew")
						"AEMTremap_makeRampControlInteractiveReplace" $rampName;

	// editorTemplate -addControl ($rampName + "_Interp");
    if( $subBlock ) {
        editorTemplate -endLayout;
    }
    
    //print ("\n"+$rampNodeAttr+"\n");
    //intField -e -ec ("AEMTremap_rampIndexFieldCmd("+$rampNodeAttr+")") "AEMTremap_rampIndexField";
    //editorTemplate -suppress ($rampName + "Input");
    //editorTemplate -suppress ($rampName + "InputBias");
    //editorTemplate -suppress ($rampName + "InputScale");
    //editorTemplate -suppress ($rampName + "InputMax");
}

// Main entry point for creating a ramp control
//
global proc AEMTremap_addRampControl( string $rampName )
{
    global string $edo_MTremapAttributeNodeName;
    $edo_MTremapAttributeNodeName=$rampName;
    //print ("AEMTremap_addRampControl ... " + $edo_MTremapAttributeNodeName + "\n");
	AEMTremap_addRampControl_doIt( $rampName, true);
}

// Main entry point for creating a ramp control with adaptive scaling
//
global proc AEaddRampControlAS( string $rampName )
{
	AEaddRampControl_doIt( $rampName, true );
}

//AEMTremap_rampIndexFieldCmd("MTremapValue1.value")
global proc AEMTremap_rampIndexFieldCmd(string $rampName)
{
    //print "AEMTremap_AEMTremap_rampIndexFieldCmd is running ... \n";
    //print ("$rampName is : "+$rampName + "\n");
    string $indexFildName = "AEMTremap_rampIndexField";
    int $index = `intField -q -v $indexFildName`;
    //$rampName="MTremapValue1.value";
    string $temp[];
    tokenize $rampName "." $temp;
    string $nodeName = $temp[0];
    AEMTremap_connectRemapArributeToValue($nodeName,$index);
};